mod parsers;
mod structs;
mod tests;
use parsers::{bitstring::parse_bit_string, certificate};
use parsers::certificate::parse_certificate;

fn main(
    certificate_bytes: pub [u8; 512],
    rdn_first_attribute: pub [u8; 64],
    check_rdn: pub bool,
    check_validity: pub bool,
    user_date: pub [u8; 16],
) {
    let cert: certificate::Certificate = parse_certificate(certificate_bytes);

    let mut proof_result: bool = true;

    if check_rdn {
        let mut length: u8 = 0;
        let mut found_zero = false;
        for i in 0..64 {
            if ((!found_zero as u8) & ((rdn_first_attribute[i] == 0) as u8)) == 1 {
                length = i as u8;
                found_zero = true;
            }
        }

        if length == 0 {
            proof_result = false;
        }

        for i in 0..64 {
            if i < length {
                if rdn_first_attribute[i] != cert.issuer.rdns[0].set[0].value[i] {
                    proof_result = false;
                }
            }
        }
    }

    if check_validity {
        let mut is_after_not_before = true;
        let mut is_before_not_after = true;

        let mut still_equal_not_before = true;
        let mut still_equal_not_after = true;

        for i in 0..16 {
            let user_byte = user_date[i];
            let not_before_byte = cert.validity.not_before[i];
            let not_after_byte = cert.validity.not_after[i];

            if still_equal_not_before {
                if user_byte < not_before_byte {
                    is_after_not_before = false;
                }
                if user_byte != not_before_byte {
                    still_equal_not_before = false;
                }
            }

            if still_equal_not_after {
                if user_byte > not_after_byte {
                    is_before_not_after = false;
                }
                if user_byte != not_after_byte {
                    still_equal_not_after = false;
                }
            }
        }

        if !(is_after_not_before & is_before_not_after) {
            proof_result = false;
        }
    }

    let check_selected = check_rdn | check_validity;
    assert(check_selected, "At least one check must be enabled");

    assert(proof_result, "One or more checks failed");
}


#[test]
fn test_main() {
    let mut cert_bytes: [u8; 512] = [0 as u8; 512];
    let data: [u8; 377] = [
        0x30, 0x82, 0x01, 0x75, 0x30, 0x82, 0x01, 0x1f, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14,
        0x69, 0x2a, 0x11, 0x7e, 0x24, 0xfb, 0x5c, 0x8e, 0xc3, 0xac, 0x37, 0xc5, 0x32, 0xcc, 0x2d,
        0x44, 0x0a, 0x82, 0x9a, 0x25, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
        0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x0f, 0x31, 0x0d, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x04,
        0x03, 0x0c, 0x04, 0x54, 0x65, 0x73, 0x74, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x36,
        0x32, 0x30, 0x31, 0x30, 0x31, 0x38, 0x35, 0x39, 0x5a, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x36,
        0x32, 0x31, 0x31, 0x30, 0x31, 0x38, 0x35, 0x39, 0x5a, 0x30, 0x0f, 0x31, 0x0d, 0x30, 0x0b,
        0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x04, 0x54, 0x65, 0x73, 0x74, 0x30, 0x5c, 0x30, 0x0d,
        0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x4b,
        0x00, 0x30, 0x48, 0x02, 0x41, 0x00, 0xbd, 0x4d, 0xdd, 0x55, 0xc8, 0x86, 0x5b, 0xc9, 0x47,
        0x9c, 0x14, 0xde, 0x0e, 0xa8, 0x3b, 0x4d, 0x29, 0x9b, 0xc3, 0x1d, 0x10, 0x03, 0xa1, 0xfb,
        0xe1, 0x50, 0x2e, 0x23, 0xfb, 0xb1, 0x49, 0xe1, 0x7d, 0x6c, 0xb7, 0x17, 0xdd, 0xcc, 0x6c,
        0x83, 0x75, 0xbe, 0xf4, 0x1f, 0x32, 0x9c, 0x9d, 0x46, 0xe0, 0x49, 0xf0, 0xfa, 0xcb, 0x92,
        0x2d, 0xd8, 0xaf, 0x3b, 0x1e, 0x8c, 0x35, 0x40, 0x34, 0x03, 0x02, 0x03, 0x01, 0x00, 0x01,
        0xa3, 0x53, 0x30, 0x51, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14,
        0x49, 0x15, 0x15, 0xac, 0xcf, 0xa7, 0x8b, 0x2e, 0x3e, 0x9c, 0xb9, 0xfa, 0x66, 0x34, 0xc2,
        0x3f, 0x06, 0x93, 0xd6, 0x79, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,
        0x16, 0x80, 0x14, 0x49, 0x15, 0x15, 0xac, 0xcf, 0xa7, 0x8b, 0x2e, 0x3e, 0x9c, 0xb9, 0xfa,
        0x66, 0x34, 0xc2, 0x3f, 0x06, 0x93, 0xd6, 0x79, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,
        0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0d, 0x06, 0x09, 0x2a,
        0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x41, 0x00, 0x75, 0xef,
        0x3b, 0xe6, 0x3f, 0x2b, 0x7e, 0xac, 0x98, 0x67, 0x53, 0xcd, 0x9e, 0x0d, 0x3f, 0x60, 0x50,
        0x00, 0x11, 0x03, 0x6f, 0xa0, 0x09, 0x98, 0x3a, 0x28, 0xff, 0x7e, 0xf1, 0x2a, 0x91, 0x2d,
        0xc9, 0x69, 0xb7, 0xbc, 0xdf, 0xa3, 0x25, 0x63, 0x5a, 0x13, 0x58, 0xc2, 0xbd, 0x99, 0xb4,
        0xcc, 0x82, 0x39, 0x06, 0x96, 0xfd, 0x2b, 0x23, 0x5a, 0x2b, 0xfc, 0x31, 0x82, 0x16, 0x5f,
        0xc7, 0x5a,
    ];

    for i in 0..data.len() {
        cert_bytes[i] = data[i];
    }

    let mut final_rdn: [u8; 64] = [0; 64];
    let rdn_first_attribute: [u8; 4] = [0x54, 0x65, 0x73, 0x74];
    for i in 0..rdn_first_attribute.len() {
        final_rdn[i] = rdn_first_attribute[i];
    }

    let mut user_date: [u8; 16] = [0; 16];
    let between: [u8; 16] = [
        0x32, 0x35, 0x30, 0x36, 0x32, 0x30, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x00, 0x00,
        0x00,
    ]; // "250620120000Z"
    for i in 0..16 {
        user_date[i] = between[i];
    }

    main(cert_bytes, final_rdn, true, true, user_date);

    main(cert_bytes, final_rdn, true, false, user_date);

    main(cert_bytes, final_rdn, false, true, user_date);

}
